
import pygame
import math

WIDTH, HEIGHT = 800, 600
RED = 255, 0, 0
BLACK = 0, 0, 0
GREEN = 0, 255, 0
BLUE = 0, 0, 255
WHITE = 255, 255, 255
FPS = 120 # 프레임
ALPHA = 1/FPS
FORCE = 150 # 키보드로 입력하는 힘
K1, K2 = 10, 30 # 탄성계수를 늘리고
DAMP1, DAMP2 = 0.5, 0.99 # 감쇠계수(inner)을 줄였다.
COUNT = 43 # 점들의 개수
INTERVAL = 25 # 격자점 사이 간격
MASS = 1/COUNT

adj = [ # 인접행렬, 숫자는 자연길이
    [0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 57, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[60, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 57, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 58, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 60, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 58, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 65, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 44, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 60, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 55, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 57, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 38, 0, 0, 45, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 46, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 39, 0, 56, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 57, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 45, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 49, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 56, 0, 40, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 53, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 0, 31, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 58, 0, 0],
[57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 34, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0],
[63, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0],
[0, 0, 60, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0],
[0, 0, 0, 51, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 75, 0, 0],
[0, 0, 0, 0, 44, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 46, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 74, 86, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 65, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 44, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 66, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 35, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 55, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 59, 32, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 51, 0, 0, 0, 0, 0, 70, 0, 0, 57, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 53, 0, 0, 0, 0, 61, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 43, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 53, 0, 0, 0, 68, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 53, 0, 0, 55, 46, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 52, 43, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 54, 51, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 73, 65, 74, 0, 0, 0, 0, 0, 0, 76, 0, 0, 53, 0, 49, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 61, 68, 55, 0, 0, 0, 0, 49, 0, 46, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 52, 54, 53, 49, 0, 0, 78, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 48, 50, 58, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 51, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 45, 57, 0, 0, 0, 0, 0, 49, 46, 78, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

defPos = [ # 초기 정점들의 위치
    [109,217],
[105,277],
[121,332],
[170,364],
[227,383],
[285,388],
[349,376],
[401,346],
[432,300],
[440,242],
[431,176],
[401,134],
[351,107],
[295,101],
[238,104],
[201,116],
[162,142],
[136,172],
[245,149],
[211,171],
[189,193],
[166,219],
[154,262],
[172,300],
[203,325],
[240,340],
[279,342],
[321,342],
[372,315],
[399,280],
[408,246],
[396,191],
[359,155],
[307,143],
[277,187],
[234,219],
[249,274],
[325,269],
[328,208],
[285,233],
[203,250],
[363,238],
[293,344]
] 

outSide = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
bonus = [[ 0 for j in range(int(HEIGHT/INTERVAL)) ] for i in range(int(WIDTH/INTERVAL))]

pygame.init()
fpsClock = pygame.time.Clock()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Simulation")


class Particle:
    def __init__(self, pos):
        self.pos = pos
        self.m = MASS
        self.m, self.v, self.a = 1, [0,0], [0,0]
    def draw(self, screen):
        pygame.draw.circle(screen, RED, self.pos, 5)
    def drawEdge(self, P, screen):
        pygame.draw.line(screen, BLACK, self.pos, P.pos, 5)

    def update(self):
        self.v[0], self.v[1] = self.v[0]+self.a[0]*ALPHA, self.v[1]+self.a[1]*ALPHA
        self.pos[0], self.pos[1] = self.pos[0]+self.v[0]*ALPHA, self.pos[1]+self.v[1]*ALPHA

    def delta(self, P):
        return P.pos[0]-self.pos[0], P.pos[1]-self.pos[1]
    def dist(self, P):
        x, y = self.delta(P)
        return math.sqrt(x**2+y**2)
    def dir(self, P):
        x, y = self.delta(P)
        theta = math.atan(y/x) if x!=0 else math.pi/2
        i, j = math.cos(theta), math.sin(theta)
        if x*i<0 or y*j<0: i, j = -i, -j
        return [i,j]


class Simulation:
    def __init__(self):
        self.Vtx = [ Particle(defPos[i]) for i in range(COUNT) ]
    
    def draw(self, screen):
        for i in range(COUNT):
            for j in range(i,COUNT):
                if adj[i][j]!=0 and outSide[i]+outSide[j]<=2: 
                    self.Vtx[i].drawEdge(self.Vtx[j],screen)
            self.Vtx[i].draw(screen)
        for i in range(int(WIDTH/INTERVAL)):
            for j in range(int(HEIGHT/INTERVAL)):
                x, y = i*INTERVAL, j*INTERVAL
                if bonus[i][j] == 0:
                    col = GREEN if self.isInside(x,y) else BLACK
                else: col = BLUE if bonus[i][j]<0 else RED
                pygame.draw.circle(screen, col, (x,y), 3)

    def reward(self):
        Reward = 0
        for i in range(int(WIDTH/INTERVAL)):
            for j in range(int(HEIGHT/INTERVAL)):
                x, y = i*INTERVAL, j*INTERVAL
                if self.isInside(x,y): Reward += bonus[i][j]
        return Reward

    def calculate(self, Ext):
        for i in range(COUNT):
            self.Vtx[i].a = [0,0]
            for j in range(COUNT):
                if adj[i][j]!=0:
                    damp, k = (DAMP2, K2) if outSide[i]+outSide[j]==2 else (DAMP1, K1)
                    dir = self.Vtx[i].dir(self.Vtx[j])
                    pull = self.Vtx[i].dist(self.Vtx[j]) - adj[i][j]
                    self.Vtx[i].a[0] += (pull*dir[0]*k+Ext[i][0])/self.Vtx[i].m - damp*self.Vtx[i].v[0]
                    self.Vtx[i].a[1] += (pull*dir[1]*k+Ext[i][1])/self.Vtx[i].m - damp*self.Vtx[i].v[1]
        for i in range(COUNT):
            self.Vtx[i].update()
        
    def isInside(self, x, y):
        cross = 0
        for i in range(COUNT):
            for j in range(i,COUNT):
                if adj[i][j]!=0 and outSide[i]+outSide[j]==2:
                    Pos1, Pos2 = self.Vtx[i].pos, self.Vtx[j].pos
                    if (Pos1[1]>y and Pos2[1]<y) or (Pos1[1]<y and Pos2[1]>y):
                        atX = (y-Pos2[1])*(Pos1[0]-Pos2[0])/(Pos1[1]-Pos2[1]) + Pos2[0]
                        if x<atX: cross += 1
        return cross % 2 > 0


Sim = Simulation()

while True:
    fpsClock.tick(FPS)
    External = [[0,0] for i in range(COUNT)]
    events = pygame.event.get()
    for event in events:
        if event.type == pygame.QUIT: exit()
        if event.type == pygame.KEYDOWN: print(Sim.reward())
        if event.type == pygame.MOUSEBUTTONDOWN:
            x, y = pygame.mouse.get_pos()
            x, y = int(x/INTERVAL+0.5), int(y/INTERVAL+0.5)
            if event.button == 1: bonus[x][y] += 1
            elif event.button == 3: bonus[x][y] -= 1
                

    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP]: 
        for i in range(8): External[i][1] -= FORCE
    if keys[pygame.K_DOWN]: 
        for i in range(8): External[i][1] += FORCE
    if keys[pygame.K_RIGHT]: 
        for i in range(8): External[i][0] += FORCE
    if keys[pygame.K_LEFT]: 
        for i in range(8): External[i][0] -= FORCE
    if keys[pygame.K_w]: 
        for i in range(9,16): External[i][1] -= FORCE
    if keys[pygame.K_a]: 
        for i in range(9,16): External[i][0] -= FORCE
    if keys[pygame.K_s]: 
        for i in range(9,16): External[i][1] += FORCE
    if keys[pygame.K_d]: 
        for i in range(9,16): External[i][0] += FORCE

    screen.fill(WHITE)
    Sim.calculate(External)
    Sim.draw(screen)
    pygame.display.update()

